@startuml EnhancedAttackSystem

skinparam class {
    BackgroundColor #FFFBD6
    BorderColor #333333
    ArrowColor #333333
}

package "攻撃システム" {
    interface IAttackAction <<interface>> {
        +Execute(): void
        +CanExecute(): bool
    }

    interface IChangeableKeyConfig <<interface>> {
        +ChangeKey(AttackButtonType, KeyCode): void
        +GetCurrentKey(AttackButtonType): KeyCode
    }

    enum AttackButtonType {
        PRIMARY_ATTACK
        SECONDARY_ATTACK
        SPECIAL_ATTACK_1
        SPECIAL_ATTACK_2
    }

    class AttackTrigger {
        +RegisterAction(AttackButtonType, IAttackAction)
        +OnAttackButtonPressed(AttackButtonType)
        -_actionMap: Dictionary<AttackButtonType, IAttackAction>
    }

    class KeyConfigManager implements IChangeableKeyConfig {
        +ChangeKey(AttackButtonType, KeyCode)
        +GetCurrentKey(AttackButtonType)
        -_keyBindings: Dictionary<AttackButtonType, KeyCode>
        +SaveConfig()
        +LoadConfig()
    }

    class PlayerInput {
        +AttackButtonEvents: Dictionary<AttackButtonType, UnityEvent>
        +Initialize(KeyConfigManager)
    }

    note right of IChangeableKeyConfig
        「キー設定変更」の契約
        ゲームオプション画面で実装される
    end note

    note left of AttackButtonType
        PRIMARY_ATTACK → 通常攻撃（マウス左クリック）
        SECONDARY_ATTACK → 強攻撃（マウス右クリック）
        SPECIAL_ATTACK_1 → スキル1（デフォルト:Q）
        SPECIAL_ATTACK_2 → スキル2（デフォルト:E）
    end note
}

PlayerInput --> KeyConfigManager : 設定を参照
PlayerInput --> AttackTrigger : イベント通知
AttackTrigger o-> IAttackAction : 保持
AttackTrigger ..> IAttackAction : <<call>> Execute()
KeyConfigManager ..> AttackButtonType : 使用
AttackTrigger ..> AttackButtonType : 使用

@enduml